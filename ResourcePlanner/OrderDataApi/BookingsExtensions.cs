// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;
using OrderData;
using OrderData.Models;

namespace OrderData
{
    public static partial class BookingsExtensions
    {
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static DbBooking DeleteBooking(this IBookings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBookings)s).DeleteBookingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<DbBooking> DeleteBookingAsync(this IBookings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<OrderData.Models.DbBooking> result = await operations.DeleteBookingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static DbBooking GetBooking(this IBookings operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBookings)s).GetBookingAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<DbBooking> GetBookingAsync(this IBookings operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<OrderData.Models.DbBooking> result = await operations.GetBookingWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        public static IList<DbBooking> GetBookings(this IBookings operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBookings)s).GetBookingsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<DbBooking>> GetBookingsAsync(this IBookings operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<OrderData.Models.DbBooking>> result = await operations.GetBookingsWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='booking'>
        /// Required.
        /// </param>
        public static DbBooking PostBooking(this IBookings operations, DbBooking booking)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBookings)s).PostBookingAsync(booking);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='booking'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<DbBooking> PostBookingAsync(this IBookings operations, DbBooking booking, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<OrderData.Models.DbBooking> result = await operations.PostBookingWithOperationResponseAsync(booking, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='booking'>
        /// Required.
        /// </param>
        public static object PutBooking(this IBookings operations, int id, DbBooking booking)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IBookings)s).PutBookingAsync(id, booking);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the OrderData.IBookings.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='booking'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> PutBookingAsync(this IBookings operations, int id, DbBooking booking, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.PutBookingWithOperationResponseAsync(id, booking, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
